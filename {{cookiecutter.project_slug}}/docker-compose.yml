version: '3.6'

services:
  proxy:
    image: traefik:v2.6
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "/Users/vittorio/etc/letsencrypt:/letsencrypt:ro"
    command: 
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      # - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - "--api.insecure=true"
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=vittorioyan@qq.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # # Handle host with and without "www" to redirect to only one of them
      # # Uses environment variable DOMAIN
      # To disable www redirection remove the Host() you want to discard, here and
      # below for HTTPS
      - traefik.http.routers.proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
      - traefik.http.routers.proxy-http.entrypoints=http
      # traefik-https the actual router using HTTPS
      - traefik.http.routers.proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
      - traefik.http.routers.proxy-https.entrypoints=https
      - traefik.http.routers.proxy-https.tls=true
      # # Use the "le" (Let's Encrypt) resolver created below
      # - traefik.http.routers.proxy-https.tls.certresolver=myresolver
      # # Define the port inside of the Docker service to use
      # - traefik.http.services.proxy.loadbalancer.server.port=80
      # Handle domain with and without "www" to redirect to only one
      # To disable www redirection remove the next line
      # - traefik.http.middlewares.www-redirect.redirectregex.regex=^https?://(www.)?(vito.run)/(.*)
      # # Redirect a domain with www to non-www
      # # To disable it remove the next line
      # - traefik.http.middlewares.www-redirect.redirectregex.replacement=https://vito.run/$${3}
      # # Redirect a domain without www to www
      # # To enable it remove the previous line and uncomment the next
      # # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
      # # Middleware to redirect www, to disable it remove the next line 
      # # - traefik.http.routers.proxy-https.middlewares=www-redirect
      # # Middleware to redirect www, and redirect HTTP to HTTPS
      # # to disable www redirection remove the section: www-redirect,
      # - traefik.http.routers.proxy-http.middlewares=www-redirect,https-redirect

      

  frontend:
    image: 'fsfm-frontend:${TAG-latest}'
    build:
      context: ./frontend
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-production}
    labels:
      - traefik.enable=false
      # - traefik.http.routers.frontend.rule=Host(`${DOMAIN?Variable not set}`)
      # - traefik.http.routers.frontend-http.rule=PathPrefix(`/`)
      # - traefik.http.services.frontend.loadbalancer.server.port=80
      # - "traefik.http.routers.frontend.entrypoints=https"
      # - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    

  backend:
    image: 'fsfm-backend:${TAG-latest}'
    build:
      context: ./backend
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.backend.loadbalancer.server.port=80
    depends_on:
      - mongo

  mongo:
    image: mongo
    env_file:
      - .env
    volumes:
      - app-db-data:/data/db

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    env_file:
      - .env
    depends_on:
      - mongo
    labels:
      - traefik.enable=true
      - traefik.http.services.mongo-express-http.loadbalancer.server.port=8081
      - traefik.http.routers.mongo-express-http.rule=Host(`express.localhost`)
      - traefik.http.routers.mongo-express-http.entrypoints=http
      # - traefik.http.routers.mongo-express-http.middlewares=https-redirect
      # - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.entrypoints=http
      # - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
      # - "traefik.http.routers.mongo-express.rule=Host(`localhost1`) && (PathPrefix(`/mongoadmin`) || PathPrefix(`//mongoadmin/`))"
      # - "traefik.http.routers.mongo-express.entrypoints=http"
      # - "traefik.http.routers.mongo-express.middlewares=mongo-express"
      # - "traefik.http.middlewares.mongo-express.stripprefix.prefixes=mongoadmin,/mongoadmin}"
      # - "traefik.http.middlewares.mongo-express.stripprefix.forceslash=true"

volumes:
  app-db-data: